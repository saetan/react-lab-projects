{"version":3,"sources":["components/context/DataContext.jsx","components/Counter.jsx","components/context/ReducerContext.jsx","components/ReducerCounterA.jsx","components/ReducerCounterB.jsx","components/TotalSumReducer.jsx","components/App.jsx","index.js"],"names":["DataContext","createContext","CounterHooks","props","dataContext","useContext","useState","count","setCount","onClick","prevState","setCurrent","counterType","counterOne","counterTwo","console","log","ReducerContext","ReducerCounterA","counterReducerState","dispatch","type","payload","ReducerCounterB","TotalSumReducer","countReducer","state","action","App","current","useReducer","className","Provider","value","Counter","rootElement","document","getElementById","ReactDOM","render"],"mappings":"qNAIeA,EAFKC,0BCuELC,MAtEf,SAAsBC,GAElB,IAAMC,EAAcC,qBAAWL,GAC/B,EAA0BM,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAyDA,OACI,iCACI,qCAAWD,GACX,4BAAQE,QA1DQ,WACpBD,GAAS,SAACE,GAAD,OAAeA,EAAY,KACpCN,EAAYO,YAAW,SAACD,GACpB,MAA0B,QAAtBP,EAAMS,YACC,YAAC,eACDF,GADP,IAEIG,WAAYH,EAAUG,WAAa,IAGhC,YAAC,eACDH,GADP,IAEII,WAAYJ,EAAUI,WAAa,SA+C3C,KACA,4BAAQL,QAxCQ,WACpBD,GAAS,SAACE,GAAD,OAAeA,EAAY,KAEpCN,EAAYO,YAAW,SAACD,GACpB,MAA0B,QAAtBP,EAAMS,YACC,YAAC,eACDF,GADP,IAEIG,WAAYH,EAAUG,WAAa,IAGhC,YAAC,eACDH,GADP,IAEII,WAAYJ,EAAUI,WAAa,SA4B3C,KACA,4BAAQL,QAvBI,WAChBD,GAAS,SAACE,GAAD,OAA4B,KACrCN,EAAYO,YAAW,SAACD,GAEpB,OADAK,QAAQC,IAAIN,GACc,QAAtBP,EAAMS,YACC,YAAC,eACDF,GADP,IAEIG,WAAY,IAGT,YAAC,eACDH,GADP,IAEII,WAAY,SAWpB,WChEGG,EAFQhB,0BCeRiB,MAZf,SAAyBf,GACrB,MAAwCE,qBAAWY,GAAnD,mBAAOE,EAAP,KAA4BC,EAA5B,KACA,OACI,iCACI,qCAAWD,EAAoBN,YAC/B,4BAAQJ,QAAS,WAAQW,EAAS,CAAEC,KAAM,SAAUC,QAAS,EAAGV,YAAa,QAA7E,KACA,4BAAQH,QAAS,WAAQW,EAAS,CAAEC,KAAM,SAAUC,SAAU,EAAGV,YAAa,QAA9E,KACA,4BAAQH,QAAS,WAAQW,EAAS,CAAEC,KAAM,MAAOC,QAAS,EAAGV,YAAa,QAA1E,WCKGW,MAZf,SAAyBpB,GACrB,MAAwCE,qBAAWY,GAAnD,mBAAOE,EAAP,KAA4BC,EAA5B,KACA,OACI,iCACI,qCAAWD,EAAoBL,YAC/B,4BAAQL,QAAS,WAAQW,EAAS,CAAEC,KAAM,SAAUC,QAAS,EAAGV,YAAa,QAA7E,KACA,4BAAQH,QAAS,WAAQW,EAAS,CAAEC,KAAM,SAAUC,SAAU,EAAGV,YAAa,QAA9E,KACA,4BAAQH,QAAS,WAAQW,EAAS,CAAEC,KAAM,MAAOC,QAAS,EAAGV,YAAa,QAA1E,WCPG,SAASY,IAEpB,MAAwCnB,qBAAWY,GAAnD,mBAAOE,EAAP,UAEA,OACI,oCACI,mDAAyBA,EAAoBN,WAAaM,EAAoBL,aCH1F,IAAMW,EAAe,SAACC,EAAOC,GAEzB,OAAQA,EAAON,MACX,IAAK,SACD,MAA2B,MAAvBM,EAAOf,YACA,2BAAKc,GAAZ,IAAmBb,WAAYa,EAAMb,WAAac,EAAOL,UAElD,2BAAKI,GAAZ,IAAmBZ,WAAYY,EAAMZ,WAAaa,EAAOL,UAEjE,IAAK,MACD,MAA2B,MAAvBK,EAAOf,YACA,2BAAKc,GAAZ,IAAmBb,WAAYc,EAAOL,UAE/B,2BAAKI,GAAZ,IAAmBZ,WAAYa,EAAOL,UAE9C,QACI,OAAOI,IA+BJE,MA3Bf,WACI,MAA8BtB,mBAAS,CACnCO,WAAY,EACZC,WAAY,IAFhB,mBAAOe,EAAP,KAAgBlB,EAAhB,KAKA,EAAwCmB,qBAAWL,EAAc,CAAEZ,WAAY,EAAGC,WAAY,IAA9F,mBAAOK,EAAP,KAA4BC,EAA5B,KAIA,OACI,yBAAKW,UAAU,uBAEX,kBAAC,EAAYC,SAAb,CAAsBC,MAAO,CAAEJ,UAASlB,eACpC,kBAACuB,EAAD,CAAStB,YAAa,QACtB,kBAACsB,EAAD,CAAStB,YAAa,SAE1B,0CAAgBiB,EAAQhB,WAAagB,EAAQf,YAC7C,kBAAC,EAAekB,SAAhB,CAAyBC,MAAO,CAACd,EAAqBC,IAClD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACI,EAAD,SC3CVW,G,MAAcC,SAASC,eAAe,SAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,I","file":"static/js/main.11a1aa11.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst DataContext = createContext();\n\nexport default DataContext;","import React, { useState, useContext } from 'react';\nimport DataContext from './context/DataContext';\n\nfunction CounterHooks(props) {\n\n    const dataContext = useContext(DataContext);\n    const [count, setCount] = useState(0);\n\n    const handleIncrement = () => {\n        setCount((prevState) => prevState + 1);\n        dataContext.setCurrent((prevState) => {\n            if (props.counterType === \"One\") {\n                return ({\n                    ...prevState,\n                    counterOne: prevState.counterOne + 1\n                })\n            } else {\n                return ({\n                    ...prevState,\n                    counterTwo: prevState.counterTwo + 1\n                })\n            }\n        })\n    };\n\n\n\n    const handleDecrement = () => {\n        setCount((prevState) => prevState - 1);\n\n        dataContext.setCurrent((prevState) => {\n            if (props.counterType === \"One\") {\n                return ({\n                    ...prevState,\n                    counterOne: prevState.counterOne - 1\n                })\n            } else {\n                return ({\n                    ...prevState,\n                    counterTwo: prevState.counterTwo - 1\n                })\n            }\n        })\n    };\n\n    const handleReset = () => {\n        setCount((prevState) => (prevState = 0));\n        dataContext.setCurrent((prevState) => {\n            console.log(prevState)\n            if (props.counterType === \"One\") {\n                return ({\n                    ...prevState,\n                    counterOne: 0\n                })\n            } else {\n                return ({\n                    ...prevState,\n                    counterTwo: 0\n                })\n            }\n        })\n    };\n\n    return (\n        <section>\n            <h2>Count:{count}</h2>\n            <button onClick={handleIncrement}>+</button>\n            <button onClick={handleDecrement}>-</button>\n            <button onClick={handleReset}>Reset</button>\n        </section>\n    );\n}\n\nexport default CounterHooks;","import { createContext } from 'react';\n\nconst ReducerContext = createContext();\n\nexport default ReducerContext;","import React, { useContext } from 'react';\nimport ReducerContext from './context/ReducerContext';\n\n\n\nfunction ReducerCounterA(props) {\n    const [counterReducerState, dispatch] = useContext(ReducerContext);\n    return (\n        <section>\n            <h2>Count:{counterReducerState.counterOne}</h2>\n            <button onClick={() => { dispatch({ type: \"CHANGE\", payload: 1, counterType: \"A\" }) }}>+</button>\n            <button onClick={() => { dispatch({ type: \"CHANGE\", payload: -1, counterType: \"A\" }) }}>-</button>\n            <button onClick={() => { dispatch({ type: \"SET\", payload: 0, counterType: \"A\" }) }}>Reset</button>\n        </section>\n    );\n}\n\nexport default ReducerCounterA;","import React, { useContext } from 'react';\nimport ReducerContext from './context/ReducerContext';\n\n\n\nfunction ReducerCounterB(props) {\n    const [counterReducerState, dispatch] = useContext(ReducerContext);\n    return (\n        <section>\n            <h2>Count:{counterReducerState.counterTwo}</h2>\n            <button onClick={() => { dispatch({ type: \"CHANGE\", payload: 1, counterType: \"B\" }) }}>+</button>\n            <button onClick={() => { dispatch({ type: \"CHANGE\", payload: -1, counterType: \"B\" }) }}>-</button>\n            <button onClick={() => { dispatch({ type: \"SET\", payload: 0, counterType: \"B\" }) }}>Reset</button>\n        </section>\n    );\n}\n\nexport default ReducerCounterB;","import React from \"react\";\nimport { useContext } from \"react\";\nimport ReducerContext from \"./context/ReducerContext\";\n\n\nexport default function TotalSumReducer() {\n\n    const [counterReducerState, dispatch] = useContext(ReducerContext);\n\n    return (\n        <>\n            <h1>Total Sum Reducer : {counterReducerState.counterOne + counterReducerState.counterTwo}</h1>\n        </>\n    )\n}","import React, { useState, useReducer } from \"react\";\nimport Counter from './Counter'\nimport DataContext from \"./context/DataContext\";\nimport ReducerContext from \"./context/ReducerContext\";\nimport ReducerCounterA from \"./ReducerCounterA\";\nimport ReducerCounterB from \"./ReducerCounterB\";\nimport TotalSumReducer from \"./TotalSumReducer\";\n\nconst countReducer = (state, action) => {\n\n    switch (action.type) {\n        case \"CHANGE\":\n            if (action.counterType === \"A\") {\n                return { ...state, counterOne: state.counterOne + action.payload };\n            } else {\n                return { ...state, counterTwo: state.counterTwo + action.payload };\n            }\n        case \"SET\":\n            if (action.counterType === \"A\") {\n                return { ...state, counterOne: action.payload };\n            } else {\n                return { ...state, counterTwo: action.payload };\n            }\n        default:\n            return state;\n    }\n}\n\nfunction App() {\n    const [current, setCurrent] = useState({\n        counterOne: 0,\n        counterTwo: 0,\n    })\n\n    const [counterReducerState, dispatch] = useReducer(countReducer, { counterOne: 0, counterTwo: 0 });\n\n\n\n    return (\n        <div className=\"nes-text is-primary\">\n\n            <DataContext.Provider value={{ current, setCurrent }}>\n                <Counter counterType={\"One\"} />\n                <Counter counterType={\"Two\"} />\n            </DataContext.Provider>\n            <h1>Total Sum: {current.counterOne + current.counterTwo}</h1>\n            <ReducerContext.Provider value={[counterReducerState, dispatch]}>\n                <ReducerCounterA />\n                <ReducerCounterB />\n                <TotalSumReducer />\n            </ReducerContext.Provider>\n        </div>\n    );\n}\n\nexport default App","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from './components/App'\n\nimport \"./styles.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);"],"sourceRoot":""}